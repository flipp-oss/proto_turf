syntax = "proto3";

package everything.v1;

import "simple/simple.proto";
import "google/protobuf/descriptor.proto";

extend google.protobuf.FieldOptions {
  int32 some_option = 51234;
}

enum ForeignEnum {
  FOREIGN_FOO = 0;
  FOREIGN_BAR = 1;
}

message ForeignMessage {
  int32 id = 1;
  string name = 2;
}
message TestAllTypes {

enum NestedEnum {
    FOO = 0;
    BAR = 2;
    BAZ = 3;
  }

  int32 optional_int32 = 1;
  int64 optional_int64 = 2;
  uint32 optional_uint32 = 3;
  uint64 optional_uint64 = 4;
  sint32 optional_sint32 = 5;
  sint64 optional_sint64 = 6;
  fixed32 optional_fixed32 = 7;
  fixed64 optional_fixed64 = 8;
  sfixed32 optional_sfixed32 = 9;
  sfixed64 optional_sfixed64 = 10;
  float optional_float = 11;
  double optional_double = 12;
  bool optional_bool = 13;
  string optional_string = 14;
  bytes optional_bytes = 15;
  NestedMessage optional_nested_message = 18;
  ForeignMessage optional_foreign_message = 19;
  simple.v1.SimpleMessage optional_import_message = 20;
  NestedEnum optional_nested_enum = 21;
  ForeignEnum optional_foreign_enum = 22;
  simple.v1.SimpleEnum optional_import_enum = 23;
  string optional_string_piece = 24 [ctype = STRING_PIECE];
  string optional_cord = 25 [ctype = CORD];
  bytes optional_bytes_cord = 86 [ctype = CORD];
  NestedMessage optional_lazy_message = 27 [lazy = true];
  NestedMessage optional_unverified_lazy_message = 28 [unverified_lazy = true];
  repeated int32 repeated_int32 = 31;
  repeated int64 repeated_int64 = 32;
  repeated uint32 repeated_uint32 = 33;
  repeated uint64 repeated_uint64 = 34;
  repeated sint32 repeated_sint32 = 35;
  repeated sint64 repeated_sint64 = 36;
  repeated fixed32 repeated_fixed32 = 37;
  repeated fixed64 repeated_fixed64 = 38;
  repeated sfixed32 repeated_sfixed32 = 39;
  repeated sfixed64 repeated_sfixed64 = 40;
  repeated float repeated_float = 41;
  repeated double repeated_double = 42;
  repeated bool repeated_bool = 43;
  repeated string repeated_string = 44;
  repeated bytes repeated_bytes = 45;
  repeated NestedMessage repeated_nested_message = 48;
  repeated ForeignMessage repeated_foreign_message = 49;
  repeated simple.v1.SimpleMessage repeated_import_message = 50;
  repeated NestedEnum repeated_nested_enum = 51;
  repeated ForeignEnum repeated_foreign_enum = 52;
  repeated simple.v1.SimpleEnum repeated_import_enum = 53;
  repeated string repeated_string_piece = 54 [ctype = STRING_PIECE];
  repeated string repeated_cord = 55 [ctype = CORD];
  repeated NestedMessage repeated_lazy_message = 57 [lazy = true];
                oneof oneof_field {
    uint32 oneof_uint32 = 111;
    NestedMessage oneof_nested_message = 112;
    string oneof_string = 113;
    bytes oneof_bytes = 114;
    string oneof_cord = 115 [ctype = CORD];
    string oneof_string_piece = 116 [ctype = STRING_PIECE];
    NestedMessage oneof_lazy_nested_message = 117 [lazy = true];
  }

  message NestedMessage {
    int32 bb = 1 [(everything.v1.some_option) = 1234
];
  }

  message OptionalGroup {
    int32 a = 17;
  }

  message RepeatedGroup {
    int32 a = 47;
  }
}
service TestService {
  rpc TestMethod(TestAllTypes) returns (ForeignMessage) {
  };
}
